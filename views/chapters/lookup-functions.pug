p This chapter will guide yout through combining data from two tables with the !{f("=VLOOKUP()")} function.
h3 Merging tables

p Given a table of Finnish MP's, and their party name, we want to add a third column separating them into opposition and government politicians. This information can be looked up in the table to the right. We want to look up the party name from #[cell B2] in the table to the right, and insert the value from the second column in that table. This is written !{f('=VLOOKUP(B2, E$2:F$9, 2)')}, where #[code B2] is the value to look up, the #[code E$2:F$9], the table to fetch data from, and #[code 2] meaning ”second column”. An optional fourth argument should, if included, be #[code 0] or #[code #{t("FALSE")}] in this case.
:spreadsheet(1DvTCLLMO3SRvbHUdTuW4li-XgzrMCrDtX098vz3dv3M, highlight="C2,C3,C4,C5")
      The value in <code>B2</code> is looked up in the table to the right, fetching the content from the second column there.

p Before autofilling this formula to the bottom, you need to make sure that the row numbers in the reference to the table you are getting data from is locked, by putting $-signs #[em in front of the row number]. Otherwise the row number will be increase as you autofill down, move off the table boundaries. An alternative approach is to use whole columns in the reference, like this: !{f("=VLOOKUP(B2, E:F, 2)")}. If you have a #[a(href="#cleaning-up") clean sheet], this should normally work fine (except for the edge case when the column title can also appear as a value in that column.)
p In the illustration above, the tables we want to combine are place next to each others, for illustrative purposes. Usually it is a #[em much] better idea to put the tables you want to combine on different sheets, in the same #{software == "Google Sheets" ? "document" : "file"}. You can switch sheets while writing a formula, to drag and select a cell reference area on a different sheet. Just be careful to finnish the formula before going back, or you will very likely end up polluting it with accidental cell references. Moving the second table a new sheet called #[code parties], our formula would look like this: !{f("=VLOOKUP(B2, parties!A:B, 2)")}, assuming we put our table to the left (columns A and B) in the new sheet. #[code 2] still refers to the second column, that is now column B.
:spreadsheet(1Q-TVyWhafMnzUHg2LNx-_-tg6CiDqd3Z_fScvrhxUZ4, highlight="C2,C3,C4,C5")
  Here we have moved the second table to a separate sheet, as is good practice.

h3 Finding missing values

p Let's say you have a dataset with municipality names in one column, and want to check if any municipality is not present. You can use a pivot table to count the number of municipalities, but how do you find which ones are missing? A quick way is by doing using a !{f("=VLOOKUP()")} function “in reverse”, starting from the list of municipalities, and checking for each municipality in the original data.
:spreadsheet(19yq26hxDLvxBpu1pn6bZ63EMKxb5rEEntqQewVBuqrI)
    Ängelholm is the missing municipality in the data sheet! The fourth argument is there to make sure we only get exact matches.
p Having one municipality too much? Try applying the same logic, but the other way around, using a !{f("=VLOOKUP()")} from the data sheet to the sheet with the list of municipalities.

h3 Finding the pair with the biggest difference

p When you have geographical data, it is ofter worth comparing neighbouring regions. If two neighbouring municipalities display very different values, you might have a story, or at the very least an interesting place to look for a case! For this to work, you will need a sheet with all neighbouring pairs, one pair on each column. Creating that sheet is outside the scope of this guide, but you can with relative ease use any GIS software, e.g. the open source QGIS, to produce such a table. You will find that this is a very useful sheet to have laying around.

p Use !{f("=VLOOKUP()")} to fetch the value for both municipalities in the row. In the example below, we have the data in a sheet called #[code data], and can fetch it with  !{f("=VLOOKUP(A2, data!A:B, 2, 0)")} and !{f("=VLOOKUP(B2, data!A:B, 2, 0)")} respectively. Finally we calculate the difference, simply writing !{f("=C2-D2")} in the last column (if your table has to rows for each pair; both A, B and B, A), or !{f("=ABS(C2-D2)")} (to make all differences positive number) if your table has only one row for each pair of neighbours. Finally sort the sheet on the last column, to find out that Orust and Stenungsund are the two neighbouring municipalities with the greatest difference between them.

:spreadsheet(1anmpj1p1m-eUZQdycRhym_QKpwvUN8-8V-L6pgAo1Y4)
    In this example, table of neighbourgs contained two rows for each pair (both A,B and B,A). In case you only have one row for each pair, you will have to use the absolute value in the diff column.

h3 Categorizing

p The !{f("=VLOOKUP()")} formula can be used for finding the nearest match. This is useful for categorizing data. In the example below, we want to translate the average score from an icecream test to labels according to the table to the right. By setting the fourth argument to “#{t("TRUE")}” in column C, we allow  non-exact matches, making the formula pick the nearest value: !{f("=VLOOKUP(B2,E2:F6,2,TRUE)")}.
:spreadsheet(1fwRZr3ldeu10BXVFsgkyJoTh-pwKrWCBxIfBt4pWv8A, highlight=["C2", "C3"])
    In column C we ask for the nearest match in the labels table to the right.