p Do you have more than one piece of information ín one column? Maybe a municipality number and name, like #[code 0182 Stockholm]; or first name and last name, like  #[code Lovelace, Ada]; or text formated date, like #[code 2016-12-24], where you want a separate column for month and year respectively? Here's how to extract that data, without destroying your original columns.
h2 Using a delimitor
p For the case when data is seperated by a certin character (a space in #[code 0182 Stockholm], a comma and a space in #[code Lovelace, Ada] and a dash in #[code 2016-12-24]), we can combine !{f("=FIND()")} with !{f("=MID()")}, !{f("=LEFT()")} and !{f("=RIGHT()")} to extract the part we are after.
p !{f("=FIND()")} gives us the position of one string in another, so that !{f('=FIND("+", "Journalism++")')} returns #[code 11], as the first ‘+’ sign is at position 11.
p !{f("=MID()")} gives us a part of a string, so that !{f('=MID("Journalism++", 11, 2)')} returns #[code ++], starting at position 11, and extracting 2 characters from there. !{f('=LEFT("Journalism++", 10)')} gives us the 10 leftmost characters, #[code Journalism], and !{f('=RIGHT("Journalism++", 2)')}, as you might expect, gives us the 2 rightmost, #[code Journalism]. Now we put it all together, extracting the names and country codes from thiss list of athletes banned for doping.
:spreadsheet(1_p4rl-AgmAj-Xj8PZgKCvFuOplJb9o6Kh1Nql3QK2As, highlight="B2,C2,D2,B3,C3,D3")
  Note that we are searching for the string “space followed by paranthesis”. Try being as precise as possible, to avoid false positives. 
p Note that we subtract 1 from the position return by !{f("=FIND()")}, to end #[em before] the delimitor, and in the same way add #[em 2] to start after it (we got the position of the space, the first character in our delimiter, and don't want that or the parantheses in the nationality code).
h2 Using a fixed with
p Let's use a similar logic, but to extract the year from a text formatted ISO date (YYYY-mm-dd), and this time with some foolproofing! From the same dataset, here are the athletes with the end date of their penalties. The year, of course, is the first four characters, so we don't even need !{f('=FIND()')}, we already know that the dash will be the fifth character. Except for when the content of the cell is not a year, but something else!
p In the spreadsheet below, we extract the four leftmost characters, and then check if they form a number or not. If they do, we add them to column #[code E]. If not, we'll leave that cell blank. There is no function like “LOOKS_NUMERIC” in #{software}, but we can still check if something looks like a number, by first converting it to a value, and check if we succeeded. This works well even in some weird edge cases. You still risk a false positive if your date column contain other values starting with four digits, of course, but in this case that seems unlikely. 
p To do the number checking, we use !{f('=ISNUMBER(VALUE(C2))')}, where !{f('=VALUE()')} tries converting something to a numerical value, and !{f('=ISNUMBER()')} returns #{t('TRUE')} if it succeeded, or #{t('FALSE')} if it didn't. We then use an !{f('=IF()')} formula to do different things depending on the outcome.
:spreadsheet(1jfFOP7QUoxcKsSPR5kmOOomr8PRRAw8AeNjc3ysSN8M)
